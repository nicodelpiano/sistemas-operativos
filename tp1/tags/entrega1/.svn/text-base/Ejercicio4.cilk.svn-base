/*
********Sistemas Operativos 1********
********   Practica 1      **********
********   Ejercicio 3     **********

Alumno: Nicolas Del Piano

Respuesta: no mejora la performance porque cuesta mas crear mas procesos que paralelizarlos. Quicksort crea muchisimos procesos, lo cual entorpece la paralelizacion, y es mas costoso. La solucion propuesta es verificar el tamano del arreglo, si es mayor a 2500, el codigo lo paralelizamos, pero si es menor 2500 lo hacemos linealmente, ya que es mas costoso crear mas procesos que hagan las operaciones en paralelo que ordenar estos arreglos pequenos.
*/

#include <stdio.h>
#include <stdlib.h> 

#define N 1000000

void swap(int *v, int i, int j) 
{
  int tmp=v[i];
  v[i]=v[j];
  v[j]=tmp;
}

int colocar(int *v, int b, int t)
{
  int i;
  int pivote, valor_pivote;
  int temp;
 
  pivote = b;
  valor_pivote = v[pivote];
  for (i=b+1; i<=t; i++){
    if (v[i] < valor_pivote){
      pivote++;    
      swap(v,i,pivote);
    }
  }
  temp=v[b];
  v[b]=v[pivote];
  v[pivote]=temp;
  return pivote;
} 

void QuicksortSeq_lin(int* v,int b,int t)
{
  int pivote;
  if(b<t){
     pivote = colocar(v,b,t);
     QuicksortSeq_lin(v,b,pivote-1);
     QuicksortSeq_lin(v,pivote+1,t);
  }
}

cilk void QuicksortSeq(int* v, int b, int t)
{
  int pivote;
  if(t-b>2500){
    pivote=colocar(v, b, t);
    spawn QuicksortSeq(v, b, pivote-1);
    spawn QuicksortSeq(v, pivote+1, t);
    sync;
  }else{
    QuicksortSeq_lin(v,b,pivote-1);
    QuicksortSeq_lin(v,pivote+1,t);
  }
}

cilk int main(int argc, char **argv) 
{
  int a[N],i;

  for(i=0;i<N;i++) 
    a[i]=random()%N;

	spawn QuicksortSeq(a,0,N-1);
	sync;
/*	for(i=0;i<N;i++) {
		//printf("%d ",a[i]);
	}
*/	//printf("\n");
	return 0;
}

